/*
 * Copyright 2018 The BookLab Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "base"
    id "jacoco"
}

allprojects {
    group = 'nl.tudelft.booklab'
    version = '1.0'

    ext {
        kotlin_version = '1.2.50'
        ktor_version = '0.9.2'
        junit_jupiter_version = '5.2.0'
        junit_platform_version = '1.2.0'
        jacoco_version = '0.8.2-SNAPSHOT'
    }
}

repositories {
    jcenter()

    // This repository is needed to get the latest snapshot of Jacoco
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots" }
}

evaluationDependsOnChildren()

jacoco {
    // We use the latest snapshot of Jacoco in order to get it to ignore Kotlin-generated code
    toolVersion = jacoco_version
}

task jacocoTestReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        if (it.plugins.hasPlugin("java") || it.plugins.hasPlugin("kotlin")) {
            sourceSets it.sourceSets.main
            dependsOn it.test
        }
    }

    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.enabled = true
        html.destination file("${buildDir}/reports/jacoco/test/html")
    }
}

check.dependsOn jacocoTestReport

/* A task for computing and printing a branch coverage summary */
jacocoTestReport.doLast {
    logger.lifecycle('Branch coverage summary:')

    def slurper = new XmlSlurper()
    slurper.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    slurper.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)

    def spacing = allprojects*.name.collect { it.length() }.max() + 1
    allprojects.each {
        if (!it.plugins.hasPlugin("jacoco"))  {
            return
        }

        def report = it.jacocoTestReport.reports.xml.destination

        if (!report.exists()) {
            return
        }

        def res = slurper.parse report
        def counter = res.counter.find { it.@type == 'BRANCH' }
        def covered = counter.@covered.toInteger()
        def missed = counter.@missed.toInteger()
        def total = covered + missed

        logger.lifecycle(String.format("%-${spacing}s %,.1f%%", it.name + ':', (covered / total) * 100))
    }
}
